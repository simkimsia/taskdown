tasks:
  # Phase 1 - Easiest (Days)
  CORE-1:
    title: "Setup GitHub Repository"
    status: "done"
    description: "Create main repository with basic structure and documentation"

  SPEC-1:
    title: "Draft Core Format Specification"
    status: "done"
    description: "Write initial specification for the minimal viable format"

  TOOLS-1:
    title: "A Typescript Implementation Basic Validator"
    status: "in_progress"
    description: |
      Create a framework-agnostic TypeScript library for validating Taskdown format.

      Core Requirements:
      1. Input Handling
         - Accept both YAML strings and parsed objects
         - Handle both standalone Taskdown and markdown-embedded blocks
         - Stream parsing for large files

      2. Validation Levels
         - Syntax (valid YAML)
         - Schema (required fields, types)
         - Semantics (task IDs, relationships)
         - Custom rules support

      3. Error Reporting
         - Precise error locations (line, column)
         - Detailed error messages
         - Error categorization
         - Suggestion for fixes

      4. API Design
         - Async validation support
         - Rule configuration
         - Extensible validation rules
         - Observable validation progress

      5. Output Format
         - Location info for editor integration
         - Severity levels (error/warning)
         - Machine-readable error codes
         - Human-readable messages

      Success Criteria:
      - Zero external runtime dependencies (except YAML parser)
      - Fully typed API
      - 100% test coverage
      - Browser and Node.js compatible
      - Performance benchmarks for large files
      - Documentation with examples

      Distribution:
      - Published on npm
      - ESM and CommonJS builds
      - TypeScript types included
      - Minified browser bundle"

  IMPL-3:
    title: "A python Implementation Basic Validator"
    status: "pending"
    description: "Create simple YAML validator for core format requirements"
    similar: ["TOOLS-1"]

  IMPL-1:
    title: "Implement GitHub converter"
    status: "pending"
    type: "task"
    description: |
      Create GitHub issue converter following project structure.

      References:
      - Implementation structure: ../docs/guides/project-structure.md#typescript-implementation
      - Overall converters location: ../docs/guides/project-structure.md#implementations-implementations

  IMPL-2:
    title: "Add Python package setup"
    status: "pending"
    type: "task"
    description: |
      Set up Python package structure with proper configuration.

      References:
      - Python structure: ../docs/guides/project-structure.md#python-implementation
      - Package files location: ../docs/guides/project-structure.md#core-components

  UI-2:
    title: "Create Live Editor Prototype"
    status: "pending"
    description: "Basic web-based editor with YAML validation and preview"

  # Phase 2 - Moderate (Weeks)
  DEV-1:
    title: "Build Python Reference Implementation"
    status: "pending"
    description: "Core library for parsing and manipulating TaskDown format"

  DEV-2:
    title: "Develop JavaScript SDK"
    status: "pending"
    description: "Core library for web-based implementations"

  SPEC-2:
    title: "Create JSON Schema"
    status: "done"
    description: "Formal schema definition for validation tools"

  UI-1:
    title: "Build Web Visualization Component"
    status: "pending"
    description: "Reusable web component for rendering TaskDown graphs"

  APP-2:
    title: "Develop VS Code Extension"
    status: "pending"
    description: "Extension for editing and visualizing TaskDown in VS Code"

  APP-3:
    title: "Build Python CLI tool for Taskdown automation"
    type: "task"
    status: "pending"
    description: |
      Create a command-line interface for Taskdown operations with these core commands:

      1. Validation:
         - taskdown check <file> - Validate Taskdown blocks in markdown files
         - taskdown fix <file> - Auto-fix common formatting issues

      2. Task Management:
         - taskdown list - Show all tasks and their status
         - taskdown blocked - Show blocked tasks and their blockers
         - taskdown next - Show actionable tasks (no blockers, status pending)

      3. Reports:
         - taskdown stats - Show task completion statistics
         - taskdown cycle - Detect dependency cycles
         - taskdown orphan - Find tasks with no relationships

      4. Export/Convert:
         - taskdown export <format> - Export to other task formats
         - taskdown import <format> - Import from other task formats

      Success criteria:
      - Works as both CLI tool and importable Python package
      - Comprehensive --help for each command
      - Returns proper exit codes for scripting
      - Handles multiple input files
      - Supports both .md and .taskdown files"

  DOC-1:
    title: "Write User Documentation"
    status: "pending"
    description: "Basic guides and tutorials for users"

  # Phase 3 - Complex (Months)
  APP-1:
    title: "Build LLM+DAG Viewer Application"
    status: "pending"
    description: "Main application combining LLM chat interface with DAG visualization"

  TOOLS-2:
    title: "Create Format Converters"
    status: "pending"
    description: "Tools for converting between TaskDown and other formats"

  CORE-2:
    title: "Launch Project Website"
    status: "pending"
    description: "Full project website with documentation, tools, and examples"

  DOC-2:
    title: "Create Developer Documentation"
    status: "pending"
    description: "Comprehensive API documentation and integration guides"

  # Phase 4 - Ongoing/Gradual
  COMM-1:
    title: "Set Up Community Channels"
    status: "pending"
    description: "Create and maintain community discussion spaces"

  TEST-1:
    title: "Develop Test Suite"
    status: "pending"
    description: "Comprehensive test cases for format and tools"

  DEMO-1:
    title: "Create Example Projects"
    status: "pending"
    description: "Sample projects demonstrating TaskDown usage"

  INFRA-1:
    title: "Set Up CI/CD Pipeline"
    status: "pending"
    description: "Automated testing and deployment infrastructure"

relationships:
  CORE-1:
    blocks: ["SPEC-1"]
  SPEC-1:
    blocks: ["TOOLS-1", "UI-2", "DEV-1", "DEV-2"]
  DEV-2:
    blocked_by: ["TOOLS-1"]  # we need validator
    blocks: ["UI-1", "APP-2"]
  UI-1:
    blocks: ["APP-1"]
  IMPL-1:
    part_of: "DEV-1"
    blocked_by: ["IMPL-2"]  # We need package setup before we can implement converters
  IMPL-2:
    part_of: "DEV-1"
    blocks: ["IMPL-1", "IMPL-3"]  # Package setup must be done first
  DEV-1:
    blocks: ["TOOLS-2"]
    subtasks: ["IMPL-1", "IMPL-2"]
  APP-3:
    blocked_by: ["IMPL-1", "IMPL-2"]